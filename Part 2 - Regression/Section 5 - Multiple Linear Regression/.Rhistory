class(5)
length(5L)
c(4L, 5L, 8L, 3L)
length(c(4L, 5L, 8L, 3L))
class(c(4L, 5L, 8L, 3L))
5
5L
class(5)
class(5L)
6.02e23
Inf
length(Inf)
class(Inf)
mode(NaN)
class(NaN)
[1:3] + [1:3]
1:3
1:3 + 1:3
(4 * 1:3 - 2) / 2
letters
letters
month
month.abb
month.name
NA
class(NA)
factor(c("female", "female", "male", NA, "female"))
library(testthat)
context("hello world")
test_that("no name", {
expect_equal(hello_world(), "Hello, World!")
})
source("./hello-world.R")
setwd("~/Exercism/r/hello-world")
source("./hello-world.R")
library(testthat)
context("hello world")
test_that("no name", {
expect_equal(hello_world(), "Hello, World!")
})
test_that("no name", {
expect_equal(hello_world(), "Hello, World!")
})
source("./hello-world.R")
test_that("no name", {
expect_equal(hello_world(), "Hello, World!")
})
source("./hello-world.R")
library(testthat)
context("hello world")
test_that("no name", {
expect_equal(hello_world(), "Hello, World!")
})
message("All tests passed for exercise: hello-world")
source("./leap.R")
setwd("~/Exercism/r/leap")
View(hello_world)
library(testthat)
library(testthat)
source("./leap.R")
library(testthat)
context("leap")
test_that("year not divisible by 4: common year", {
year <- 2015
expect_equal(leap(year), FALSE)
})
test_that("year divisible by 4, not divisible by 100: leap year", {
year <- 2016
expect_equal(leap(year), TRUE)
})
test_that("year divisible by 100, not divisible by 400: common year", {
year <- 2100
expect_equal(leap(year), FALSE)
})
test_that("year divisible by 400: leap year", {
year <- 2000
expect_equal(leap(year), TRUE)
})
message("All tests passed for exercise: leap")
source("./leap.R")
library(testthat)
context("leap")
test_that("year not divisible by 4: common year", {
year <- 2015
expect_equal(leap(year), FALSE)
})
test_that("year divisible by 4, not divisible by 100: leap year", {
year <- 2016
expect_equal(leap(year), TRUE)
})
test_that("year divisible by 100, not divisible by 400: common year", {
year <- 2100
expect_equal(leap(year), FALSE)
})
test_that("year divisible by 400: leap year", {
year <- 2000
expect_equal(leap(year), TRUE)
})
message("All tests passed for exercise: leap")
source("./leap.R")
library(testthat)
context("leap")
test_that("year not divisible by 4: common year", {
year <- 2015
expect_equal(leap(year), FALSE)
})
test_that("year divisible by 4, not divisible by 100: leap year", {
year <- 2016
expect_equal(leap(year), TRUE)
})
test_that("year divisible by 100, not divisible by 400: common year", {
year <- 2100
expect_equal(leap(year), FALSE)
})
test_that("year divisible by 400: leap year", {
year <- 2000
expect_equal(leap(year), TRUE)
})
message("All tests passed for exercise: leap")
source("./leap.R")
library(testthat)
context("leap")
test_that("year not divisible by 4: common year", {
year <- 2015
expect_equal(leap(year), FALSE)
})
test_that("year divisible by 4, not divisible by 100: leap year", {
year <- 2016
expect_equal(leap(year), TRUE)
})
test_that("year divisible by 100, not divisible by 400: common year", {
year <- 2100
expect_equal(leap(year), FALSE)
})
test_that("year divisible by 400: leap year", {
year <- 2000
expect_equal(leap(year), TRUE)
})
message("All tests passed for exercise: leap")
source("./leap.R")
library(testthat)
context("leap")
test_that("year not divisible by 4: common year", {
year <- 2015
expect_equal(leap(year), FALSE)
})
test_that("year divisible by 4, not divisible by 100: leap year", {
year <- 2016
expect_equal(leap(year), TRUE)
})
test_that("year divisible by 100, not divisible by 400: common year", {
year <- 2100
expect_equal(leap(year), FALSE)
})
test_that("year divisible by 400: leap year", {
year <- 2000
expect_equal(leap(year), TRUE)
})
message("All tests passed for exercise: leap")
source("./leap.R")
library(testthat)
context("leap")
test_that("year not divisible by 4: common year", {
year <- 2015
expect_equal(leap(year), FALSE)
})
test_that("year divisible by 4, not divisible by 100: leap year", {
year <- 2016
expect_equal(leap(year), TRUE)
})
test_that("year divisible by 100, not divisible by 400: common year", {
year <- 2100
expect_equal(leap(year), FALSE)
})
test_that("year divisible by 400: leap year", {
year <- 2000
expect_equal(leap(year), TRUE)
})
message("All tests passed for exercise: leap")
setwd("~/Workspace/super-data-science-machine-learning/Part 2 - Regression/Section 5 - Multiple Linear Regression")
dataset = read.csv('50_Startups.csv')
# Encoding categorical data
dataset$State = factor(dataset$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1, 2, 3))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Profit, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
Profit
x = Profit ~ .
x
x
x[1]
x[2]
x[3]
x[4]
mode(x)
class(x)
typeof(x)
terms(x)
y <- a + b
a <- 1
b <- 2
y <- a + b
terms(y)
y <- q ~ a + b
terms(y)
backwardElimination <- function(x, sl) {
numVars = length(x)
for (i in c(1:numVars)){
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
return(summary(regressor))
}
backwardElimination(dataset, 0.05)
length(dataset)
dataset
mode(dataset)
class(dataset)
regressor = lm(formula = Profit ~ .,
data = training_set)
summary(regressor)
coef(summary(regressor))
c(2:5)
mode(coef(summary(regressor)))
class(coef(summary(regressor)))
coef(summary(regressor))[1]
coef(summary(regressor))[1,]
coef(summary(regressor))[,1]
coef(summary(regressor))[c(2:5), "Pr(>ltl)"]
coef(summary(regressor))[c(2:5), "Pr(>Itl)"]
max(coef(summary(regressor))[c(2:5), "Pr(>|t|)"])
max(coef(summary(regressor))[c(2:4), "Pr(>|t|)"])
coef(summary(regressor))[c(2:5), "Pr(>|t|)"]
length(dataset)
dataset = read.csv('50_Startups.csv')
dataset
dataset$State = factor(dataset$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1, 2, 3))
dataset
dataset$State = factor(dataset$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1, 3, 2))
dataset
dataset = read.csv('50_Startups.csv')
dataset$State = factor(dataset$State,
levels = c('Florida', 'California', 'New York'),
labels = c(1, 3, 2))
dataset
regressor = lm(formula = Profit ~ .,
data = dataset)
summary(regressor)
dataset = read.csv('50_Startups.csv')
dataset$State = factor(dataset$State,
levels = c('Florida', 'New York', 'California'),
labels = c(1, 3, 2))
regressor = lm(formula = Profit ~ .,
data = dataset)
summary(regressor)
max(coef(summary(regressor))[2:5], "Pr(>|t|")
max(coef(summary(regressor))[2:5], "Pr(>|t|)"])
max(coef(summary(regressor))[2:5, "Pr(>|t|)"])
max(coef(summary(regressor))[2:6, "Pr(>|t|)"])
dataset = read.csv('50_Startups.csv')
dataset$State = factor(dataset$State,
levels = c('Florida', 'California', 'New York'),
labels = c(1, 2, 3))
regressor = lm(formula = Profit ~ .,
data = dataset)
summary(regressor)
dataset = read.csv('50_Startups.csv')
dataset$State = factor(dataset$State,
levels = c('Florida', 'New York', 'California'),
labels = c(1, 2, 3))
regressor = lm(formula = Profit ~ .,
data = dataset)
summary(regressor)
backwardElimination <- function(x, sl) {
numVars = length(x) + 1
for (i in c(1:numVars)){
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
return(summary(regressor))
}
dataset = read.csv('50_Startups.csv')
dataset$State = factor(dataset$State,
+ levels = c('Florida', 'New York', 'California'),
+ labels = c(1, 2, 3))
regressor = lm(formula = Profit ~ .,
+ data = dataset)
summary(regressor)
backwardElimination <- function(x, sl) {
numVars = length(x)
for (i in c(1:numVars)){
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
print(maxVar)
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
return(summary(regressor))
}
dataset = read.csv('50_Startups.csv')
dataset$State = factor(dataset$State,
+ levels = c('Florida', 'New York', 'California'),
+ labels = c(1, 2, 3))
regressor = lm(formula = Profit ~ .,
+ data = dataset)
summary(regressor)
backwardElimination <- function(x, sl) {
numVars = length(x)
for (i in c(1:numVars)){
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
print(maxVar)
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
return(summary(regressor))
}
dataset = read.csv('50_Startups.csv')
dataset$State = factor(dataset$State,
levels = c('Florida', 'New York', 'California'),
labels = c(1, 2, 3))
regressor = lm(formula = Profit ~ ., data = dataset)
summary(regressor)
backwardElimination(dataset, 0.05)
backwardElimination <- function(x, sl) {
numVars = length(x) + 1
for (i in c(1:numVars)){
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
print(maxVar)
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
return(summary(regressor))
}
dataset = read.csv('50_Startups.csv')
dataset$State = factor(dataset$State,
levels = c('Florida', 'New York', 'California'),
labels = c(1, 2, 3))
regressor = lm(formula = Profit ~ ., data = dataset)
summary(regressor)
backwardElimination(dataset, 0.05)
dataset = read.csv('50_Startups.csv')
dataset$State = factor(dataset$State,
levels = c('Florida', 'New York', 'California'),
labels = c(1, 2, 3))
regressor = lm(formula = Profit ~ ., data = dataset)
summary(regressor)
backwardElimination <- function(x, sl) {
numRows = length(x) + 1
for (i in c(1:numVars)){
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numRows), "Pr(>|t|)"])
print(maxVar)
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numRows), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numRows = numRows - 1
}
return(summary(regressor))
}
dataset = read.csv('50_Startups.csv')
dataset$State = factor(dataset$State,
levels = c('Florida', 'New York', 'California'),
labels = c(1, 2, 3))
backwardElimination(dataset, 0.05)
backwardElimination <- function(x, sl) {
numRows = length(x) + 1
for (i in c(2:numRows)){
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numRows), "Pr(>|t|)"])
print(maxVar)
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numRows), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numRows = numRows - 1
}
return(summary(regressor))
}
dataset = read.csv('50_Startups.csv')
dataset$State = factor(dataset$State,
levels = c('Florida', 'New York', 'California'),
labels = c(1, 2, 3))
backwardElimination(dataset, 0.05)
dataset = read.csv('50_Startups.csv')
dataset$State = factor(dataset$State,
levels = c('Florida', 'New York', 'California'),
labels = c(1, 2, 3))
backwardElimination(dataset, 0.05)
dataset
regressor = lm(formula = Profit ~ ., data = dataset)
backwardElimination(dataset, 0.05)
backwardElimination(dataset, 0.05)
backwardElimination(dataset, 0.05)
backwardElimination(dataset, 0.05)
backwardElimination(dataset, 0.05)
backwardElimination(dataset, 0.05)
backwardElimination <- function(x, sl) {
numRows = length(x) + 1
for (i in c(1:numVars)){
print(x)
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numRows), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numRows), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numRows = numRows - 1
}
return(summary(regressor))
}
backwardElimination(dataset, 0.05)
backwardElimination <- function(x, sl) {
numRows = length(x) + 1
for (i in c(1:numRows)){
print(x)
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numRows), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numRows), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numRows = numRows - 1
}
return(summary(regressor))
}
backwardElimination(dataset, 0.05)
backwardElimination <- function(x, sl) {
numRows = length(x) + 1
for (i in c(1:numRows)){
print(x)
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numRows), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numRows), "Pr(>|t|)"] == maxVar)
x = x[, -(j-1)]
}
numRows = numRows - 1
}
return(summary(regressor))
}
backwardElimination(dataset, 0.05)
backwardElimination <- function(x, sl) {
numRows = length(x) + 1
for (i in c(1:numRows)){
print(x)
print(numRows)
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numRows), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numRows), "Pr(>|t|)"] == maxVar)
x = x[, -(j-1)]
}
numRows = numRows - 1
}
return(summary(regressor))
}
backwardElimination(dataset, 0.05)
backwardElimination <- function(x, sl) {
numRows = length(x) + 1
for (i in c(1:numRows)){
print(x)
print(numRows)
regressor = lm(formula = Profit ~ ., data = x)
print(coef(summary(regressor)))
maxVar = max(coef(summary(regressor))[c(2:numRows), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numRows), "Pr(>|t|)"] == maxVar)
x = x[, -(j-1)]
}
numRows = numRows - 1
}
return(summary(regressor))
}
backwardElimination(dataset, 0.05)
dataset = read.csv('50_Startups.csv')
dataset$State = factor(dataset$State,
levels = c('Florida', 'New York', 'California'),
labels = c(1, 2, 3))
regressor = lm(formula = Profit ~ ., data = dataset)
summary(step(regressor))
